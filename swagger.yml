openapi: 3.0.3
info:
  title: Swagger Vortex - Orders -> OpenAPI 3.0
  description: |-
    This is a project for documentation of API Contract of Order.

  termsOfService: toDo
  contact:
    email: technology@vortex-paas.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1

servers:
  - url: https://vortex-paas.sand-box.com
tags:
  - name: Orders
    description: Everything about your Orders
    externalDocs:
      description: Read more
      url: http://vortex-paas.com/doc/orders
paths:
  /orders/v1/order:
    post:
      tags:
        - Orders
      summary: Add a new order
      description: Adding a new order from a partner
      operationId: addOrder
      parameters:
        - name: Authorization
          in: header
          description: Token bearer pre generate by oauth request
          required: true
          explode: true
          schema:
            type: string
            example: "Bearer GHViphopimn46871HAiouybo21594"
        - name: partnerId
          in: header
          description: identifier of the partner that is adding a new order
          required: true
          explode: true
          schema:
            type: integer
            example: 989189289
      requestBody:
        description: Add a new order
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddOrder"
        required: true
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShortOrder"
        "401":
          description: Unauthorized
        "403":
          description: Partner not allowed
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unprocessable_Entity"
            application/xml:
              schema:
                $ref: "#/components/schemas/Unprocessable_Entity"
        "500":
          description: Internal Server Error
      security:
        - partner_auth:
            - write:orders
            - read:orders
    get:
      tags:
        - Orders
      summary: Get a list of all orders
      description: Get a list of all orders in
      operationId: findOrders
      parameters:
        - name: Authorization
          in: header
          description: Token bearer pre generate by oauth request
          required: true
          explode: true
          schema:
            type: string
            example: "Bearer GHViphopimn46871HAiouybo21594"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrdersList"
        "401":
          description: Unauthorized
        "403":
          description: Partner not allowed
        "500":
          description: Internal Server Error
      security:
        - partner_auth:
            - read:orders
  /orders/v1/orders/partnerId/{partnerId}:
    get:
      tags:
        - Orders
      summary: Get a list of orders
      description: Get a list of orders from a particular partner
      operationId: findOrdersByPartnerId
      parameters:
        - name: Authorization
          in: header
          description: Token bearer pre generate by oauth request
          required: true
          explode: true
          schema:
            type: string
            example: "Bearer GHViphopimn46871HAiouybo21594"
        - name: partnerId
          in: path
          description: ID of partner to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrdersList"
        "401":
          description: Unauthorized
        "403":
          description: Partner not allowed
        "500":
          description: Internal Server Error
      security:
        - partner_auth:
            - write:orders
            - read:orders
  /orders/v1/order/partnerId/{partnerId}/partnerOrderid/{partnerOrderid}:
    get:
      tags:
        - Orders
      summary: Get an order
      description: Get an order with a specific code
      operationId: findOrdersByPartnerOrderid
      parameters:
        - name: Authorization
          in: header
          description: Token bearer pre generate by oauth request
          required: true
          explode: true
          schema:
            type: string
            example: "Bearer GHViphopimn46871HAiouybo21594"
        - name: partnerOrderid
          in: path
          description: ID of partner to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShortOrder"
        "401":
          description: Unauthorized
        "403":
          description: Partner not allowed
        "500":
          description: Internal Server Error
      security:
        - partner_auth:
            - write:orders
            - read:orders
  /orders/v1/order/details/vortexOrderid/{vortexOrderid}:
    get:
      tags:
        - Orders
      summary: Get an orders details
      description: Get an orders details by internal order id
      operationId: findOrdersDetailsByInternalOrderId
      parameters:
        - name: Authorization
          in: header
          description: Token bearer pre generate by oauth request
          required: true
          explode: true
          schema:
            type: string
            example: "Bearer GHViphopimn46871HAiouybo21594"
        - name: partnerId
          in: path
          description: ID of partner to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderDetails"
            application/xml:
              schema:
                $ref: "#/components/schemas/OrderDetails"
        "401":
          description: Unauthorized
        "403":
          description: Partner not allowed
        "500":
          description: Internal Server Error
      security:
        - partner_auth:
            - write:orders
            - read:orders
components:
  schemas:
    AddOrder:
      type: object
      properties:
        orderInfo:
          $ref: "#/components/schemas/OrderInfo"
        orderItems:
          type: array
          description: Descrição dos itens do pedido
          items:
            type: object
            $ref: "#/components/schemas/OrderItem"
        billingData:
          $ref: "#/components/schemas/BillingData"
        shippingData:
          $ref: "#/components/schemas/ShippingData"
        paymentData:
          $ref: "#/components/schemas/PaymentsData"

    OrderDetails:
      type: object
      properties:
        partner:
          type: string
          description: Nome da loja parceira
          example: MegaLeo
        score:
          type: integer
          format: int64
          example: 10
        vortexOrderid:
          type: integer
          format: int64
          description: Codigo do pedido Vortex
          example: 10
        createDate:
          type: string
          description: Data do pedido
          example: "2023-03-09T21:38:59.9894222"
        updateDate:
          type: string
          description: Data do pedido
          example: "2023-03-09T21:38:59.9894222"
        orderStatus:
          $ref: "#/components/schemas/OrderStatus"
        issuerRelationship:
          type: boolean
          description: Nome da loja parceira
          example: true
        orderInfo:
          $ref: "#/components/schemas/OrderInfo"
        orderItems:
          type: array
          description: Descrição dos itens do pedido
          items:
            type: object
            $ref: "#/components/schemas/OrderItem"
        billingData:
          $ref: "#/components/schemas/BillingData"
        shippingData:
          $ref: "#/components/schemas/ShippingData"
        paymentData:
          $ref: "#/components/schemas/PaymentsData"

    OrderInfo:
      type: object
      properties:
        partnerOrderid:
          type: integer
          format: int64
          description: Codigo do pedido loja parceira
          example: 1512
        orderDateTime:
          type: string
          description: Data do pedido
          example: "2023-03-09T21:38:59.9894222"
        relationshipType:
          type: string
          description: Type of relationship between customer and cardholder
          example: Amigos de trabalho
        amount:
          type: number
          format: double
          description: Valor dos produtos
          example: 10000
        totalAmount:
          type: number
          format: double
          description: Valor total do pedido
          example: 15995
        discountamount:
          type: number
          format: double
          description: Valor do disconto aplicado
          example: 0
        ip:
          type: string
          description: The name of the ordering customer
          example: "192.168.0.1"
        isGift:
          type: boolean
          description: The name of the ordering customer
          example: false
        originChannel:
          type: string
          description: The name of the ordering customer
          example: website
        businessCode:
          type: number
          description: The name of the ordering customer
          example: 1
        partnerSegment:
          type: number
          description: The name of the ordering customer
          example: 1
        SLA:
          type: number
          description: The name of the ordering customer
          example: 30

    OrderItem:
      type: object
      properties:
        itemCode:
          type: string
          description: Name printed on card
          example: "59845"
        itemName:
          type: string
          description: The cardholder document
          example: Iphone13 mini 256gb
        amount:
          type: number
          description: Order billing address
          example: 530000
        quantity:
          type: number
          description: Order billing address
          example: 1
        categoryCode:
          type: number
          description: Order billing address
          example: 1
        categoryName:
          type: string
          description: The cardholder document
          example: Iphone13 mini 256gb
        isGift:
          type: boolean
          description: The name of the ordering customer
          example: false
        isMarketPlace:
          type: boolean
          description: The name of the ordering customer
          example: true
        sellerName:
          type: string
          description: Name printed on card
          example: Loja do Juquinha
        sellerDocument:
          type: string
          description: The cardholder document
          example: 52645678910
        courier:
          type: string
          description: The cardholder document
          example: Fedex

    BillingData:
      type: object
      properties:
        client:
          $ref: "#/components/schemas/Client"
        address:
          $ref: "#/components/schemas/Address"
        phones:
          type: array
          description: Descrição dos itens do pedido
          items:
            type: object
            $ref: "#/components/schemas/Phone"

    ShippingData:
      type: object
      properties:
        client:
          $ref: "#/components/schemas/Client"
        address:
          $ref: "#/components/schemas/Address"
        phones:
          type: array
          description: Descrição dos itens do pedido
          items:
            type: object
            $ref: "#/components/schemas/Phone"
        deliveryType:
          type: string
          description: Name printed on card
          example: 1
        deliveryTime:
          type: string
          description: The cardholder document
          example: 5 dias úteis
        shippingAmount:
          type: number
          description: Order billing address
          example: 5559
        pickUpStoreDocument:
          type: string
          description: The cardholder document
          example: 12345678910

    PaymentsData:
      type: object
      properties:
        paymentDateTime:
          type: string
          description: Data do pedido
          example: "2023-03-09T21:38:59.9894222"
        amount:
          type: number
          format: double
          description: Valor pago
          example: 15995
        paymentMethod:
          type: number
          description: |
            **The below table defines the metho code**
             | Method Code    | Method Name |
             | ---------------| ------------| 
             | 1              | credit      | 
             | 2              | debit       |
             | 3              | pix         |
             | 4              | voucher     |
             | 5              | transfer    |
          example: 1
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
        installmentsQuantity:
          type: integer
          description: Number of installments
          example: 2
        currency:
          type: integer
          description: Number of installments
          example: 986
        card:
          $ref: "#/components/schemas/Card"
        address:
          $ref: "#/components/schemas/Address"

    Client:
      type: object
      properties:
        clientType:
          type: number
          description: Name printed on card
          example: 1
        document:
          type: string
          description: The cardholder document
          example: 12345678910
        name:
          type: string
          description: The cardholder document
          example: John Ronald Tolkien
        birthDate:
          type: string
          description: Name printed on card
          example: "1988-02-10"
        email:
          type: string
          description: The cardholder document
          example: client@email.com.br
        gender:
          type: string
          description: The cardholder document
          example: M

    Address:
      type: object
      properties:
        street:
          type: string
          description: Name printed on card
          example: Quincas Borba
        number:
          type: string
          description: The cardholder document
          example: 31
        additionalInformation:
          type: string
          description: The cardholder document
          example: Bloco A - Apto 410
        district:
          type: string
          description: Name printed on card
          example: Vila Nova Cachoeirinha
        city:
          type: string
          description: The cardholder document
          example: São Paulo
        state:
          type: string
          description: The cardholder document
          example: SP
        zipcode:
          type: string
          description: Name printed on card
          example: 08090-070
        country:
          type: string
          description: The cardholder document
          example: Brasil
        reference:
          type: string
          description: The cardholder document
          example: Proximo ao Shopping Bourbon

    Phone:
      type: object
      properties:
        type:
          type: number
          description: Name printed on card
          example: 1
        ddi:
          type: number
          description: Name printed on card
          example: 55
        ddd:
          type: number
          description: Name printed on card
          example: 11
        phoneNumber:
          type: number
          description: Name printed on card
          example: 999999999
        extension:
          type: string
          description: The cardholder document
          example: 2552

    Card:
      type: object
      properties:
        maskedPAN:
          type: string
          description: Name printed on card
          example: 123456xxxxxx1234
        hash:
          type: string
          description: The cardholder document
          example: "12345678945612301234569874563210"
        bin:
          type: string
          description: The cardholder document
          example: 123456
        end:
          type: string
          description: Name printed on card
          example: 1234
        brandCode:
          type: number
          description: |
            **The below table defines the brands code**
             | Method Code    | Method Name |
             | ---------------| ------------| 
             | 1              | Visa        | 
             | 2              | MasterCard  |
             | 3              | Diners      |
             | 4              | Outros      |

          example: 1
        validityDate:
          type: string
          description: The cardholder document
          example: 05/2029
        cardholderName:
          type: string
          description: Name printed on card
          example: John Ronald Tolkien
        cardholderDocumentNumber:
          type: string
          description: The cardholder document
          example: 12345678910
        tid:
          type: string
          description: The cardholder document
          example: 123548761315847687436

    OrderStatus:
      type: object
      properties:
        annotations:
          type: array
          items:
            type: string
            description: Nome da loja parceira
            example: Contato realizado com o portador do cartão
        status1:
          type: string
          description: Nome da loja parceira
          example: 1
        status2:
          type: string
          description: Nome da loja parceira
          example: 2
        conclusion:
          type: string
          description: Nome da loja parceira
          example: 3

    OrdersList:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: "#/components/schemas/ShortOrder"

    ShortOrder:
      type: object
      properties:
        partner:
          type: string
          description: Nome da loja parceira
          example: MegaLeo
        vortexOrderid:
          type: integer
          format: int64
          description: Codigo do pedido Vortex
          example: 10
        partnerOrderid:
          type: integer
          format: int64
          description: Codigo do pedido loja parceira
          example: 1512
        orderDateTime:
          type: string
          description: Data do pedido
          example: "2023-03-09T21:38:59.9894222"
        orderStatus:
          $ref: "#/components/schemas/OrderStatus"

    Unprocessable_Entity:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        ordersId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: unprocessable entity
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: "##default"
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/AddOrder"
  securitySchemes:
    partner_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://vortex-paas/v1/oauth/partner/{partnerId}
          scopes:
            order: toDo
            user: toDo
            partner: toDo
    collaborators_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://vortex-paas/v1/oauth/collaborators/{userId}
          scopes:
            order: toDo
            user: toDo
            partner: toDo

    api_key:
      type: apiKey
      name: api_key
      in: header
